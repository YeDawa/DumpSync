pub enum MySQLKeywords {
    Use,
    Limit,
    Offset,
    Values,
    Unique,
    Insert,
    IfExists,
    TableInfo,
    DropTable,
    References,
    ShowTables,
    SelectFrom,
    AlterTable,
    ForeignKey,
    LockTables,
    InsertInto,
    CreateTable,
    ShowColumns,
    IfNotExists,
    InsertIgnore,
    UnlockTables,
    GetTableNames,
    TruncateTable,
    AddConstraint,
    GetAlterTable,
    CreateDatabase,
    ForeignKeyInfo,
    ShowCreateTable,
    AndReferencedIsNotNull,

    Comments,
    FinalComments,
}

impl MySQLKeywords {

    pub fn as_str(&self) -> &'static str {
        match self {
            MySQLKeywords::Use => "USE",
            MySQLKeywords::Limit => "LIMIT",
            MySQLKeywords::Insert => "INSERT",
            MySQLKeywords::Unique => "UNIQUE",
            MySQLKeywords::Values => "VALUES",
            MySQLKeywords::Offset => "OFFSET",
            MySQLKeywords::IfExists => "IF EXISTS",
            MySQLKeywords::DropTable => "DROP TABLE",
            MySQLKeywords::References => "REFERENCES",
            MySQLKeywords::ShowTables => "SHOW TABLES",
            MySQLKeywords::LockTables => "LOCK TABLES",
            MySQLKeywords::InsertInto => "INSERT INTO",
            MySQLKeywords::AlterTable => "ALTER TABLE",
            MySQLKeywords::ForeignKey => "FOREIGN KEY",
            MySQLKeywords::CreateTable => "CREATE TABLE",
            MySQLKeywords::SelectFrom => "SELECT * FROM",
            MySQLKeywords::IfNotExists => "IF NOT EXISTS",
            MySQLKeywords::UnlockTables => "UNLOCK TABLES",
            MySQLKeywords::AddConstraint => "ADD CONSTRAINT",
            MySQLKeywords::TruncateTable => "TRUNCATE TABLE",
            MySQLKeywords::ShowColumns => "SHOW COLUMNS FROM",
            MySQLKeywords::CreateDatabase => "CREATE DATABASE",
            MySQLKeywords::InsertIgnore => "INSERT IGNORE INTO",
            MySQLKeywords::ShowCreateTable => "SHOW CREATE TABLE",
            MySQLKeywords::AndReferencedIsNotNull => "AND REFERENCED_TABLE_NAME IS NOT NULL",
            MySQLKeywords::GetTableNames => "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = DATABASE()",
            MySQLKeywords::TableInfo => "SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE, COLUMN_KEY FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME",
            MySQLKeywords::ForeignKeyInfo => "SELECT COLUMN_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME",
            MySQLKeywords::GetAlterTable => "SELECT CONSTRAINT_NAME, COLUMN_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE WHERE TABLE_NAME = DATABASE() AND TABLE_SCHEMA",
            
            MySQLKeywords::Comments => "--",
            MySQLKeywords::FinalComments => "---------------------------------------------------",
        }
    }

}